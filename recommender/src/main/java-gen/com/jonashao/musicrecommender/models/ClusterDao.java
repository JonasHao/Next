package com.jonashao.musicrecommender.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jonashao.musicrecommender.models.Cluster;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLUSTER".
*/
public class ClusterDao extends AbstractDao<Cluster, Long> {

    public static final String TABLENAME = "CLUSTER";

    /**
     * Properties of entity Cluster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Latitude = new Property(1, Double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, Double.class, "Longitude", false, "LONGITUDE");
        public final static Property Altitude = new Property(3, Double.class, "Altitude", false, "ALTITUDE");
        public final static Property Hour = new Property(4, Short.class, "Hour", false, "HOUR");
    };

    private DaoSession daoSession;


    public ClusterDao(DaoConfig config) {
        super(config);
    }
    
    public ClusterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLUSTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LATITUDE\" REAL," + // 1: Latitude
                "\"LONGITUDE\" REAL," + // 2: Longitude
                "\"ALTITUDE\" REAL," + // 3: Altitude
                "\"HOUR\" INTEGER);"); // 4: Hour
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLUSTER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cluster entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindDouble(2, Latitude);
        }
 
        Double Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindDouble(3, Longitude);
        }
 
        Double Altitude = entity.getAltitude();
        if (Altitude != null) {
            stmt.bindDouble(4, Altitude);
        }
 
        Short Hour = entity.getHour();
        if (Hour != null) {
            stmt.bindLong(5, Hour);
        }
    }

    @Override
    protected void attachEntity(Cluster entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cluster readEntity(Cursor cursor, int offset) {
        Cluster entity = new Cluster( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // Latitude
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // Longitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Altitude
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) // Hour
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cluster entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitude(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLongitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAltitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setHour(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cluster entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cluster entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
