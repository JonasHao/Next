package com.jonashao.musicrecommender.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.jonashao.musicrecommender.models.Recorder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORDER".
*/
public class RecorderDao extends AbstractDao<Recorder, Long> {

    public static final String TABLENAME = "RECORDER";

    /**
     * Properties of entity Recorder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ActionCode = new Property(1, Integer.class, "ActionCode", false, "ACTION_CODE");
        public final static Property ActionDate = new Property(2, java.util.Date.class, "ActionDate", false, "ACTION_DATE");
        public final static Property MusicID = new Property(3, long.class, "MusicID", false, "MUSIC_ID");
    };

    private Query<Recorder> music_RecorderListQuery;

    public RecorderDao(DaoConfig config) {
        super(config);
    }
    
    public RecorderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACTION_CODE\" INTEGER," + // 1: ActionCode
                "\"ACTION_DATE\" INTEGER," + // 2: ActionDate
                "\"MUSIC_ID\" INTEGER NOT NULL );"); // 3: MusicID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Recorder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ActionCode = entity.getActionCode();
        if (ActionCode != null) {
            stmt.bindLong(2, ActionCode);
        }
 
        java.util.Date ActionDate = entity.getActionDate();
        if (ActionDate != null) {
            stmt.bindLong(3, ActionDate.getTime());
        }
        stmt.bindLong(4, entity.getMusicID());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Recorder readEntity(Cursor cursor, int offset) {
        Recorder entity = new Recorder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ActionCode
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // ActionDate
            cursor.getLong(offset + 3) // MusicID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Recorder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActionCode(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setActionDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setMusicID(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Recorder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Recorder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "recorderList" to-many relationship of Music. */
    public List<Recorder> _queryMusic_RecorderList(long MusicID) {
        synchronized (this) {
            if (music_RecorderListQuery == null) {
                QueryBuilder<Recorder> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MusicID.eq(null));
                queryBuilder.orderRaw("T.'ACTION_DATE' DESC");
                music_RecorderListQuery = queryBuilder.build();
            }
        }
        Query<Recorder> query = music_RecorderListQuery.forCurrentThread();
        query.setParameter(0, MusicID);
        return query.list();
    }

}
