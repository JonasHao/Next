package com.jonashao.musicrecommender.models;

import java.util.List;
import com.jonashao.musicrecommender.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "MUSIC".
 */
public class Music {

    private Long id;
    private Boolean Love;
    private long RID;
    /** Not-null value. */
    private String Title;
    /** Not-null value. */
    private String Artist;
    private Long ArtistID;
    private String CoverPath;
    private Integer Duration;
    private String Album;
    private Long AlbumID;
    private Integer Year;
    private String Genre;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MusicDao myDao;

    private List<Subjection> subjectionList;
    private List<Recorder> recorderList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Music() {
    }

    public Music(Long id) {
        this.id = id;
    }

    public Music(Long id, Boolean Love, long RID, String Title, String Artist, Long ArtistID, String CoverPath, Integer Duration, String Album, Long AlbumID, Integer Year, String Genre) {
        this.id = id;
        this.Love = Love;
        this.RID = RID;
        this.Title = Title;
        this.Artist = Artist;
        this.ArtistID = ArtistID;
        this.CoverPath = CoverPath;
        this.Duration = Duration;
        this.Album = Album;
        this.AlbumID = AlbumID;
        this.Year = Year;
        this.Genre = Genre;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMusicDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Boolean getLove() {
        return Love;
    }

    public void setLove(Boolean Love) {
        this.Love = Love;
    }

    public long getRID() {
        return RID;
    }

    public void setRID(long RID) {
        this.RID = RID;
    }

    /** Not-null value. */
    public String getTitle() {
        return Title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String Title) {
        this.Title = Title;
    }

    /** Not-null value. */
    public String getArtist() {
        return Artist;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setArtist(String Artist) {
        this.Artist = Artist;
    }

    public Long getArtistID() {
        return ArtistID;
    }

    public void setArtistID(Long ArtistID) {
        this.ArtistID = ArtistID;
    }

    public String getCoverPath() {
        return CoverPath;
    }

    public void setCoverPath(String CoverPath) {
        this.CoverPath = CoverPath;
    }

    public Integer getDuration() {
        return Duration;
    }

    public void setDuration(Integer Duration) {
        this.Duration = Duration;
    }

    public String getAlbum() {
        return Album;
    }

    public void setAlbum(String Album) {
        this.Album = Album;
    }

    public Long getAlbumID() {
        return AlbumID;
    }

    public void setAlbumID(Long AlbumID) {
        this.AlbumID = AlbumID;
    }

    public Integer getYear() {
        return Year;
    }

    public void setYear(Integer Year) {
        this.Year = Year;
    }

    public String getGenre() {
        return Genre;
    }

    public void setGenre(String Genre) {
        this.Genre = Genre;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Subjection> getSubjectionList() {
        if (subjectionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubjectionDao targetDao = daoSession.getSubjectionDao();
            List<Subjection> subjectionListNew = targetDao._queryMusic_SubjectionList(id);
            synchronized (this) {
                if(subjectionList == null) {
                    subjectionList = subjectionListNew;
                }
            }
        }
        return subjectionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSubjectionList() {
        subjectionList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Recorder> getRecorderList() {
        if (recorderList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecorderDao targetDao = daoSession.getRecorderDao();
            List<Recorder> recorderListNew = targetDao._queryMusic_RecorderList(id);
            synchronized (this) {
                if(recorderList == null) {
                    recorderList = recorderListNew;
                }
            }
        }
        return recorderList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRecorderList() {
        recorderList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString() {
        return String.format("Title:%s\tArtist:%s\tDuration:%d", Title, Artist, Duration);
    }
    // KEEP METHODS END

}
