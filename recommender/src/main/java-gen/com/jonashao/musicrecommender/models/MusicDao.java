package com.jonashao.musicrecommender.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jonashao.musicrecommender.models.Music;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Love = new Property(1, Boolean.class, "Love", false, "LOVE");
        public final static Property RID = new Property(2, long.class, "RID", false, "RID");
        public final static Property Title = new Property(3, String.class, "Title", false, "TITLE");
        public final static Property Artist = new Property(4, String.class, "Artist", false, "ARTIST");
        public final static Property ArtistID = new Property(5, Long.class, "ArtistID", false, "ARTIST_ID");
        public final static Property CoverPath = new Property(6, String.class, "CoverPath", false, "COVER_PATH");
        public final static Property Duration = new Property(7, Integer.class, "Duration", false, "DURATION");
        public final static Property Album = new Property(8, String.class, "Album", false, "ALBUM");
        public final static Property AlbumID = new Property(9, Long.class, "AlbumID", false, "ALBUM_ID");
        public final static Property Year = new Property(10, Integer.class, "Year", false, "YEAR");
        public final static Property Genre = new Property(11, String.class, "Genre", false, "GENRE");
    };

    private DaoSession daoSession;


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOVE\" INTEGER," + // 1: Love
                "\"RID\" INTEGER NOT NULL UNIQUE ," + // 2: RID
                "\"TITLE\" TEXT NOT NULL ," + // 3: Title
                "\"ARTIST\" TEXT NOT NULL ," + // 4: Artist
                "\"ARTIST_ID\" INTEGER," + // 5: ArtistID
                "\"COVER_PATH\" TEXT," + // 6: CoverPath
                "\"DURATION\" INTEGER," + // 7: Duration
                "\"ALBUM\" TEXT," + // 8: Album
                "\"ALBUM_ID\" INTEGER," + // 9: AlbumID
                "\"YEAR\" INTEGER," + // 10: Year
                "\"GENRE\" TEXT);"); // 11: Genre
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean Love = entity.getLove();
        if (Love != null) {
            stmt.bindLong(2, Love ? 1L: 0L);
        }
        stmt.bindLong(3, entity.getRID());
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getArtist());
 
        Long ArtistID = entity.getArtistID();
        if (ArtistID != null) {
            stmt.bindLong(6, ArtistID);
        }
 
        String CoverPath = entity.getCoverPath();
        if (CoverPath != null) {
            stmt.bindString(7, CoverPath);
        }
 
        Integer Duration = entity.getDuration();
        if (Duration != null) {
            stmt.bindLong(8, Duration);
        }
 
        String Album = entity.getAlbum();
        if (Album != null) {
            stmt.bindString(9, Album);
        }
 
        Long AlbumID = entity.getAlbumID();
        if (AlbumID != null) {
            stmt.bindLong(10, AlbumID);
        }
 
        Integer Year = entity.getYear();
        if (Year != null) {
            stmt.bindLong(11, Year);
        }
 
        String Genre = entity.getGenre();
        if (Genre != null) {
            stmt.bindString(12, Genre);
        }
    }

    @Override
    protected void attachEntity(Music entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // Love
            cursor.getLong(offset + 2), // RID
            cursor.getString(offset + 3), // Title
            cursor.getString(offset + 4), // Artist
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // ArtistID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CoverPath
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Duration
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Album
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // AlbumID
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // Year
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // Genre
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLove(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setRID(cursor.getLong(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setArtist(cursor.getString(offset + 4));
        entity.setArtistID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCoverPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDuration(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAlbum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAlbumID(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setYear(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setGenre(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
