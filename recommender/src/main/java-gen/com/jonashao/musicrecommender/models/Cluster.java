package com.jonashao.musicrecommender.models;

import java.util.List;
import com.jonashao.musicrecommender.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "CLUSTER".
 */
public class Cluster {

    private Long id;
    private Double Latitude;
    private Double Longitude;
    private Double Altitude;
    private Short Hour;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ClusterDao myDao;

    private List<Subjection> subjectionList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Cluster() {
    }

    public Cluster(Long id) {
        this.id = id;
    }

    public Cluster(Long id, Double Latitude, Double Longitude, Double Altitude, Short Hour) {
        this.id = id;
        this.Latitude = Latitude;
        this.Longitude = Longitude;
        this.Altitude = Altitude;
        this.Hour = Hour;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClusterDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getLatitude() {
        return Latitude;
    }

    public void setLatitude(Double Latitude) {
        this.Latitude = Latitude;
    }

    public Double getLongitude() {
        return Longitude;
    }

    public void setLongitude(Double Longitude) {
        this.Longitude = Longitude;
    }

    public Double getAltitude() {
        return Altitude;
    }

    public void setAltitude(Double Altitude) {
        this.Altitude = Altitude;
    }

    public Short getHour() {
        return Hour;
    }

    public void setHour(Short Hour) {
        this.Hour = Hour;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Subjection> getSubjectionList() {
        if (subjectionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubjectionDao targetDao = daoSession.getSubjectionDao();
            List<Subjection> subjectionListNew = targetDao._queryCluster_SubjectionList(id);
            synchronized (this) {
                if(subjectionList == null) {
                    subjectionList = subjectionListNew;
                }
            }
        }
        return subjectionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSubjectionList() {
        subjectionList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString() {
        return String.format("id:%d\thour:%d", id, Hour);
    }
    // KEEP METHODS END

}
